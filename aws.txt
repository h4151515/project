https://aws.amazon.com/ko/console/

## 이론

- **OSI 7 Layer**
    
    OSI 7계층 모델은 네트워크 통신을 이해하고 설계하는 데 도움을 주기 위해 만들어진 개념적 모델입니다. 각 계층은 특정한 기능을 담당하며, 아래와 같은 7개 계층으로 구성되어 있습니다.
    
    1. 물리 계층 (Physical Layer)
    
    - 기능: 전기적, 기계적, 절차적 특성을 통해 물리적 매체에서 데이터 전송을 담당합니다.
    - 예: 케이블, 리시버, 전송 방식.
    
    2. 데이터 링크 계층 (Data Link Layer)
    
    - 기능: 물리 계층을 통해 전송된 데이터의 오류 검출 및 수정, 프레임의 생성 및 전송 관리를 담당합니다.
    - 예: 이더넷, MAC 주소.
    
    3. 네트워크 계층 (Network Layer)
    
    - 기능: 패킷의 전송 경로를 결정하고, 서로 다른 네트워크 간의 데이터 전송을 관리합니다.
    - 예: IP(Internet Protocol), 라우터.
    
    4. 전송 계층 (Transport Layer)
    
    - 기능: 데이터의 전송을 신뢰성 있게 보장하고, 세그먼트를 생성 및 관리합니다. 오류 복구 및 흐름 제어도 담당합니다.
    - 예: TCP(Transmission Control Protocol), UDP(User Datagram Protocol).
    
    5. 세션 계층 (Session Layer)
    
    - 기능: 통신 세션의 설정, 유지, 종료를 관리합니다. 여러 사용자 간의 통신을 조정합니다.
    - 예: RPC(Remote Procedure Call), NetBIOS.
    
    6. 표현 계층 (Presentation Layer)
    
    - 기능: 데이터의 형식 변환, 암호화 및 압축을 처리하여 응용 계층과 데이터를 교환할 수 있게 합니다.
    - 예: JPEG, GIF, ASCII.
    
    7. 응용 계층 (Application Layer)
    
    - 기능: 사용자가 직접 상호작용하는 계층으로, 네트워크 서비스와 응용 프로그램 간의 상호작용을 담당합니다.
    - 예: HTTP, FTP, SMTP.
- **클라우드 시스템의 이해**
    1. 분산 처리 시스템
        - 정의: 여러 개의 독립적인 컴퓨터(노드)가 함께 작업하여 데이터를 처리하는 시스템입니다. 각 노드는 특정 작업을 수행하고, 결과를 공유하여 전체 작업을 완수합니다.
        - 특징:
            - 확장성: 시스템에 새로운 노드를 추가하여 성능을 쉽게 확장할 수 있습니다.
            - 장애 내성: 하나의 노드가 실패하더라도 전체 시스템이 영향을 받지 않도록 설계됩니다.
            - 데이터 분산: 데이터가 여러 노드에 분산되어 저장되므로, 대량의 데이터를 효율적으로 처리할 수 있습니다.
        - 예시: Apache Hadoop, Apache Spark 등.
    2. 서버리스
        - 정의: 서버를 관리하지 않고 애플리케이션을 실행할 수 있는 클라우드 컴퓨팅 모델입니다. 사용자는 코드만 작성하고, 실행 환경은 클라우드 서비스 제공자가 관리합니다.
        - 특징:
            - 비용 효율성: 사용한 만큼만 비용을 지불하므로, 트래픽이 적을 때는 비용이 절감됩니다.
            - 자동 확장: 트래픽에 따라 자동으로 리소스가 조정되므로, 높은 가용성을 유지합니다.
            - 빠른 개발: 인프라 관리의 부담이 줄어들어 개발자는 비즈니스 로직에 집중할 수 있습니다.
        - 예시: AWS Lambda, Azure Functions, Google Cloud Functions 등.
    3. 로드 밸런서
        - 정의: 클라이언트의 요청을 여러 서버에 분산하여 처리하는 장치입니다. 이를 통해 서버의 부하를 고르게 분산하고, 고가용성을 보장합니다.
        - 특징
            - 부하 분산: 여러 서버에 트래픽을 균등하게 분산시켜 성능을 극대화합니다.
            - 장애 감지: 서버의 상태를 모니터링하여 장애가 발생한 서버로의 트래픽을 자동으로 차단합니다.
            - SSL 종료: 보안 연결을 관리하여 서버의 부하를 줄이는 역할도 합니다.
- **로드 밸런서(ELB)의 유형**
    
    AWS의 로드 밸런서(ELB)에는 크게 네 가지 유형이 있습니다. 각 유형은 특정 요구 사항과 사용 사례에 맞춰 설계되었습니다. 다음은 각 유형의 간단한 설명입니다.
    
    1. Application Load Balancer (ALB)
        - 주로 HTTP 및 HTTPS 트래픽을 처리합니다.
        - Layer 7 (애플리케이션 계층)에서 작동하며, 요청 내용을 기반으로 라우팅합니다.
        - URL 기반 라우팅, 호스트 기반 라우팅, WebSocket 지원 등의 기능을 제공합니다.
    2. Network Load Balancer (NLB)
        - TCP 및 UDP 트래픽을 처리하며, Layer 4 (전송 계층)에서 작동합니다.
        - 고성능 및 낮은 지연 시간을 제공하며, 초당 수백만 개의 요청을 처리할 수 있습니다.
        - 정적 IP를 제공하고, Elastic IP와 통합할 수 있습니다.
    3. Classic Load Balancer (CLB)
        - 초기 버전의 로드 밸런서로, Layer 4와 Layer 7에서 작동합니다.
        - 단순한 로드 밸런싱 기능을 제공하며, HTTP, HTTPS, TCP, SSL 트래픽을 지원합니다.
        - 현재는 ALB와 NLB로 대체될 것을 권장합니다.
    4. Gateway Load Balancer (GWLB)
        - 가상 네트워크 장비와 통합하여 트래픽을 배포하는 데 사용됩니다.
        - Layer 3 (네트워크 계층)에서 작동하며, 보안 솔루션 및 애플리케이션 가시성을 제공하는 데 유용합니다.
        - 트래픽을 수신하고, 이를 적절한 가상 장비로 라우팅합니다.
